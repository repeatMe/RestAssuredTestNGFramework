<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="5" passed="4" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-09-27T10:14:05 IST" name="Surefire suite" finished-at="2022-09-27T10:14:15 IST" duration-ms="9774">
    <groups>
    </groups>
    <test started-at="2022-09-27T10:14:05 IST" name="Surefire test" finished-at="2022-09-27T10:14:15 IST" duration-ms="9774">
      <class name="com.spotify.oauth2.tests.PlayListTests">
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.spotify.oauth2.tests.PlayListTests@540dbda9]" started-at="2022-09-27T10:14:06 IST" name="beforeMethod" finished-at="2022-09-27T10:14:06 IST" duration-ms="43" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.spotify.oauth2.tests.PlayListTests.Should_Be_Able_To_Create_A_PlayList()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.spotify.oauth2.tests.PlayListTests@540dbda9]" started-at="2022-09-27T10:14:06 IST" name="beforeMethod" finished-at="2022-09-27T10:14:06 IST" duration-ms="52" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.spotify.oauth2.tests.PlayListTests.Should_Not_Be_Able_To_Create_A_PlayList_without_Name()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.spotify.oauth2.tests.PlayListTests@540dbda9]" started-at="2022-09-27T10:14:06 IST" name="beforeMethod" finished-at="2022-09-27T10:14:06 IST" duration-ms="44" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.spotify.oauth2.tests.PlayListTests.Should_Be_Able_To_get_A_PlayList()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.spotify.oauth2.tests.PlayListTests@540dbda9]" started-at="2022-09-27T10:14:06 IST" name="beforeMethod" finished-at="2022-09-27T10:14:06 IST" duration-ms="46" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.spotify.oauth2.tests.PlayListTests.Should_Be_Able_To_update_A_PlayList()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.spotify.oauth2.tests.PlayListTests@540dbda9]" started-at="2022-09-27T10:14:06 IST" name="beforeMethod" finished-at="2022-09-27T10:14:06 IST" duration-ms="47" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.spotify.oauth2.tests.PlayListTests.Should_Not_Be_Able_To_Create_A_PlayList_with_ExpiredToken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="Should_Not_Be_Able_To_Create_A_PlayList_without_Name()[pri:0, instance:com.spotify.oauth2.tests.PlayListTests@540dbda9]" started-at="2022-09-27T10:14:06 IST" name="Should_Not_Be_Able_To_Create_A_PlayList_without_Name" finished-at="2022-09-27T10:14:15 IST" duration-ms="9186" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Should_Not_Be_Able_To_Create_A_PlayList_without_Name -->
        <test-method signature="Should_Not_Be_Able_To_Create_A_PlayList_with_ExpiredToken()[pri:0, instance:com.spotify.oauth2.tests.PlayListTests@540dbda9]" started-at="2022-09-27T10:14:06 IST" name="Should_Not_Be_Able_To_Create_A_PlayList_with_ExpiredToken" finished-at="2022-09-27T10:14:13 IST" duration-ms="7128" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Should_Not_Be_Able_To_Create_A_PlayList_with_ExpiredToken -->
        <test-method signature="Should_Be_Able_To_Create_A_PlayList()[pri:0, instance:com.spotify.oauth2.tests.PlayListTests@540dbda9]" started-at="2022-09-27T10:14:06 IST" name="Should_Be_Able_To_Create_A_PlayList" description="hi i can create a playlist for u -this is display name" finished-at="2022-09-27T10:14:15 IST" duration-ms="9333" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Should_Be_Able_To_Create_A_PlayList -->
        <test-method signature="Should_Be_Able_To_get_A_PlayList()[pri:0, instance:com.spotify.oauth2.tests.PlayListTests@540dbda9]" started-at="2022-09-27T10:14:06 IST" name="Should_Be_Able_To_get_A_PlayList" finished-at="2022-09-27T10:14:15 IST" duration-ms="9279" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Should_Be_Able_To_get_A_PlayList -->
        <test-method signature="Should_Be_Able_To_update_A_PlayList()[pri:0, instance:com.spotify.oauth2.tests.PlayListTests@540dbda9]" started-at="2022-09-27T10:14:06 IST" name="Should_Be_Able_To_update_A_PlayList" finished-at="2022-09-27T10:14:15 IST" duration-ms="9218" status="FAIL">
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Cannot parse content to class com.spotify.oauth2.pojo.Playlist because no content-type was present in the response and no default parser has been set.
You can specify a default parser using e.g.:
RestAssured.defaultParser = Parser.JSON;

or you can specify an explicit ObjectMapper using as(class com.spotify.oauth2.pojo.Playlist, <ObjectMapper>);]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Cannot parse content to class com.spotify.oauth2.pojo.Playlist because no content-type was present in the response and no default parser has been set.
You can specify a default parser using e.g.:
RestAssured.defaultParser = Parser.JSON;

or you can specify an explicit ObjectMapper using as(class com.spotify.oauth2.pojo.Playlist, <ObjectMapper>);
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:483)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:59)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.RestAssuredResponseOptionsGroovyImpl$_as_closure3.doCall(RestAssuredResponseOptionsGroovyImpl.groovy:228)
at io.restassured.internal.RestAssuredResponseOptionsGroovyImpl$_as_closure3.doCall(RestAssuredResponseOptionsGroovyImpl.groovy)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.call(PogoMetaClassSite.java:38)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:130)
at io.restassured.internal.RestAssuredResponseOptionsGroovyImpl.findContentType(RestAssuredResponseOptionsGroovyImpl.groovy:496)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.RestAssuredResponseOptionsGroovyImpl.as(RestAssuredResponseOptionsGroovyImpl.groovy:227)
at io.restassured.internal.RestAssuredResponseOptionsImpl.as(RestAssuredResponseOptionsImpl.java:169)
at com.spotify.oauth2.tests.PlayListTests.Should_Be_Able_To_update_A_PlayList(PlayListTests.java:192)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Should_Be_Able_To_update_A_PlayList -->
      </class> <!-- com.spotify.oauth2.tests.PlayListTests -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
